"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.symbol.async-iterator.js");
require("core-js/modules/es.symbol.iterator.js");
require("core-js/modules/es.symbol.to-primitive.js");
require("core-js/modules/es.symbol.to-string-tag.js");
require("core-js/modules/es.array.for-each.js");
require("core-js/modules/es.array.from.js");
require("core-js/modules/es.array.index-of.js");
require("core-js/modules/es.array.is-array.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.reverse.js");
require("core-js/modules/es.array.slice.js");
require("core-js/modules/es.date.to-primitive.js");
require("core-js/modules/es.date.to-string.js");
require("core-js/modules/es.json.to-string-tag.js");
require("core-js/modules/es.map.js");
require("core-js/modules/es.math.to-string-tag.js");
require("core-js/modules/es.number.constructor.js");
require("core-js/modules/es.object.create.js");
require("core-js/modules/es.object.define-property.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.reflect.construct.js");
require("core-js/modules/es.regexp.to-string.js");
require("core-js/modules/es.string.iterator.js");
require("core-js/modules/web.dom-collections.for-each.js");
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/es.array.concat.js");
require("core-js/modules/es.function.bind.js");
require("core-js/modules/es.function.name.js");
require("core-js/modules/es.object.get-prototype-of.js");
require("core-js/modules/es.object.set-prototype-of.js");
require("core-js/modules/es.regexp.exec.js");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
var _marked = /*#__PURE__*/_regeneratorRuntime().mark(lineBreak),
  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(wordBreak);
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _wrapNativeSuper(t) { var r = "function" == typeof Map ? new Map() : void 0; return _wrapNativeSuper = function _wrapNativeSuper(t) { if (null === t || !_isNativeFunction(t)) return t; if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== r) { if (r.has(t)) return r.get(t); r.set(t, Wrapper); } function Wrapper() { return _construct(t, arguments, _getPrototypeOf(this).constructor); } return Wrapper.prototype = Object.create(t.prototype, { constructor: { value: Wrapper, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(Wrapper, t); }, _wrapNativeSuper(t); }
function _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _isNativeFunction(t) { try { return -1 !== Function.toString.call(t).indexOf("[native code]"); } catch (n) { return "function" == typeof t; } }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
var GraphemeSplitter = require('grapheme-splitter');
var _require = require('isomorphic-textencoder'),
  encodeUTF8 = _require.encode;
var graphemeSplitter = new GraphemeSplitter();

/* abstract */
var SubstringTooLargeForLineError = /*#__PURE__*/function (_Error) {
  /* substring: string */
  /* opts: Options */

  function SubstringTooLargeForLineError(substring /* : string */, opts /* : Options */) {
    var _this;
    _classCallCheck(this, SubstringTooLargeForLineError);
    _this = _callSuper(this, SubstringTooLargeForLineError);

    // Maintains proper stack trace for where our error was thrown (only available on V8)
    // @ts-ignore
    if (Error.captureStackTrace) {
      // @ts-ignore
      Error.captureStackTrace(_this, _this.constructor);
    }

    // Custom debugging information
    _this.substring = substring;
    _this.opts = opts;
    return _this;
  }
  _inherits(SubstringTooLargeForLineError, _Error);
  return _createClass(SubstringTooLargeForLineError, [{
    key: "name",
    get: function get() {
      return this.constructor.name;
    }
  }]);
}(/*#__PURE__*/_wrapNativeSuper(Error));
var WordTooLargeForLineError = /*#__PURE__*/function (_SubstringTooLargeFor) {
  function WordTooLargeForLineError() {
    _classCallCheck(this, WordTooLargeForLineError);
    return _callSuper(this, WordTooLargeForLineError, arguments);
  }
  _inherits(WordTooLargeForLineError, _SubstringTooLargeFor);
  return _createClass(WordTooLargeForLineError, [{
    key: "message",
    get: function get() {
      return "".concat(size(this.substring), " byte word can't fit in a ").concat(this.opts.bytes, " byte block: ").concat(this.substring);
    }
  }]);
}(SubstringTooLargeForLineError);
var GraphemeTooLargeForLineError = /*#__PURE__*/function (_SubstringTooLargeFor2) {
  function GraphemeTooLargeForLineError() {
    _classCallCheck(this, GraphemeTooLargeForLineError);
    return _callSuper(this, GraphemeTooLargeForLineError, arguments);
  }
  _inherits(GraphemeTooLargeForLineError, _SubstringTooLargeFor2);
  return _createClass(GraphemeTooLargeForLineError, [{
    key: "message",
    get: function get() {
      return "".concat(size(this.substring), " byte grapheme can't fit in a ").concat(this.opts.bytes, " byte block: ").concat(this.substring);
    }
  }]);
}(SubstringTooLargeForLineError);
var CodepointTooLargeForLineError = /*#__PURE__*/function (_SubstringTooLargeFor3) {
  function CodepointTooLargeForLineError() {
    _classCallCheck(this, CodepointTooLargeForLineError);
    return _callSuper(this, CodepointTooLargeForLineError, arguments);
  }
  _inherits(CodepointTooLargeForLineError, _SubstringTooLargeFor3);
  return _createClass(CodepointTooLargeForLineError, [{
    key: "message",
    get: function get() {
      return "".concat(size(this.substring), " byte codepoint can't fit in a ").concat(this.opts.bytes, " byte block: ").concat(this.substring);
    }
  }]);
}(SubstringTooLargeForLineError);
function size(str /* : string */) /* : number */{
  var byteArray = encodeUTF8(str);
  var bytes = byteArray.byteLength;
  return bytes;
}

/* export interface Options {
    bytes: number,
    allowBreakingWords?: boolean,
    allowBreakingGraphemes?: boolean,
} */

function lineBreak(str /* : string */, opts /* : Options */) {
  var line, previousWhitespace, _iterator, _step, _step$value, word, trailingWhitespace, wordPreviousWhitespace, _iterator2, _step2, grapheme, _iterator3, _step3, codepoint;
  return _regeneratorRuntime().wrap(function lineBreak$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        line = '';
        previousWhitespace = '';
        _iterator = _createForOfIteratorHelper(wordBreak(str));
        _context.prev = 3;
        _iterator.s();
      case 5:
        if ((_step = _iterator.n()).done) {
          _context.next = 79;
          break;
        }
        _step$value = _slicedToArray(_step.value, 2), word = _step$value[0], trailingWhitespace = _step$value[1];
        if (!(size(line) + size(previousWhitespace) + size(word) <= opts.bytes)) {
          _context.next = 11;
          break;
        }
        line += previousWhitespace + word;
        previousWhitespace = trailingWhitespace;
        return _context.abrupt("continue", 77);
      case 11:
        if (!(size(word) <= opts.bytes)) {
          _context.next = 18;
          break;
        }
        if (!line) {
          _context.next = 15;
          break;
        }
        _context.next = 15;
        return line;
      case 15:
        // previously buffered whitespace is discarded as it was replaced by a line break
        // store new whitespace for later
        previousWhitespace = trailingWhitespace;
        line = word; // next line starts with word
        return _context.abrupt("continue", 77);
      case 18:
        if (opts.allowBreakingWords) {
          _context.next = 20;
          break;
        }
        throw new WordTooLargeForLineError(word, opts);
      case 20:
        // try to fit part of word into current line
        wordPreviousWhitespace = trailingWhitespace;
        _iterator2 = _createForOfIteratorHelper(graphemeSplitter.iterateGraphemes(word));
        _context.prev = 22;
        _iterator2.s();
      case 24:
        if ((_step2 = _iterator2.n()).done) {
          _context.next = 68;
          break;
        }
        grapheme = _step2.value;
        if (!(size(line) + size(previousWhitespace) + size(grapheme) <= opts.bytes)) {
          _context.next = 30;
          break;
        }
        line += previousWhitespace + grapheme;
        previousWhitespace = '';
        return _context.abrupt("continue", 66);
      case 30:
        if (!(size(grapheme) <= opts.bytes)) {
          _context.next = 37;
          break;
        }
        if (!line) {
          _context.next = 34;
          break;
        }
        _context.next = 34;
        return line;
      case 34:
        previousWhitespace = '';
        line = grapheme;
        return _context.abrupt("continue", 66);
      case 37:
        if (opts.allowBreakingGraphemes) {
          _context.next = 39;
          break;
        }
        throw new GraphemeTooLargeForLineError(grapheme, opts);
      case 39:
        // break grapheme into codepoints instead
        _iterator3 = _createForOfIteratorHelper(grapheme);
        _context.prev = 40;
        _iterator3.s();
      case 42:
        if ((_step3 = _iterator3.n()).done) {
          _context.next = 58;
          break;
        }
        codepoint = _step3.value;
        if (!(size(line) + size(previousWhitespace) + size(codepoint) <= opts.bytes)) {
          _context.next = 48;
          break;
        }
        line += previousWhitespace + codepoint;
        previousWhitespace = '';
        return _context.abrupt("continue", 56);
      case 48:
        if (!(size(codepoint) <= opts.bytes)) {
          _context.next = 55;
          break;
        }
        if (!line) {
          _context.next = 52;
          break;
        }
        _context.next = 52;
        return line;
      case 52:
        previousWhitespace = '';
        line = codepoint;
        return _context.abrupt("continue", 56);
      case 55:
        throw new CodepointTooLargeForLineError(codepoint, opts);
      case 56:
        _context.next = 42;
        break;
      case 58:
        _context.next = 63;
        break;
      case 60:
        _context.prev = 60;
        _context.t0 = _context["catch"](40);
        _iterator3.e(_context.t0);
      case 63:
        _context.prev = 63;
        _iterator3.f();
        return _context.finish(63);
      case 66:
        _context.next = 24;
        break;
      case 68:
        _context.next = 73;
        break;
      case 70:
        _context.prev = 70;
        _context.t1 = _context["catch"](22);
        _iterator2.e(_context.t1);
      case 73:
        _context.prev = 73;
        _iterator2.f();
        return _context.finish(73);
      case 76:
        // end of grapheme loop
        previousWhitespace = wordPreviousWhitespace;
      case 77:
        _context.next = 5;
        break;
      case 79:
        _context.next = 84;
        break;
      case 81:
        _context.prev = 81;
        _context.t2 = _context["catch"](3);
        _iterator.e(_context.t2);
      case 84:
        _context.prev = 84;
        _iterator.f();
        return _context.finish(84);
      case 87:
        // end of [word, trailingWhitespace] loop

        // unyielded leftovers when we're done iterating over the input string
        if (previousWhitespace) {
          if (size(line) + size(previousWhitespace) <= opts.bytes) {
            line += previousWhitespace; // retain trailing whitespace on input line if possible
          }
        }
        if (!line) {
          _context.next = 91;
          break;
        }
        _context.next = 91;
        return line;
      case 91:
      case "end":
        return _context.stop();
    }
  }, _marked, null, [[3, 81, 84, 87], [22, 70, 73, 76], [40, 60, 63, 66]]);
}

// yields [word, trailingWhitespace] tuples
function wordBreak(str /* : string */) {
  var word, trailingWhitespace, _iterator4, _step4, grapheme;
  return _regeneratorRuntime().wrap(function wordBreak$(_context2) {
    while (1) switch (_context2.prev = _context2.next) {
      case 0:
        word = '';
        trailingWhitespace = '';
        _iterator4 = _createForOfIteratorHelper(graphemeSplitter.iterateGraphemes(str));
        _context2.prev = 3;
        _iterator4.s();
      case 5:
        if ((_step4 = _iterator4.n()).done) {
          _context2.next = 19;
          break;
        }
        grapheme = _step4.value;
        if (!/^\s+$/.test(grapheme)) {
          _context2.next = 10;
          break;
        }
        // collect whitespace
        trailingWhitespace += grapheme;
        return _context2.abrupt("continue", 17);
      case 10:
        if (!trailingWhitespace) {
          _context2.next = 16;
          break;
        }
        _context2.next = 13;
        return [word, trailingWhitespace];
      case 13:
        word = grapheme;
        trailingWhitespace = '';
        return _context2.abrupt("continue", 17);
      case 16:
        // continuation of word
        word += grapheme;
      case 17:
        _context2.next = 5;
        break;
      case 19:
        _context2.next = 24;
        break;
      case 21:
        _context2.prev = 21;
        _context2.t0 = _context2["catch"](3);
        _iterator4.e(_context2.t0);
      case 24:
        _context2.prev = 24;
        _iterator4.f();
        return _context2.finish(24);
      case 27:
        if (!word) {
          _context2.next = 30;
          break;
        }
        _context2.next = 30;
        return [word, trailingWhitespace];
      case 30:
      case "end":
        return _context2.stop();
    }
  }, _marked2, null, [[3, 21, 24, 27]]);
}
module.exports = {
  WordTooLargeForLineError: WordTooLargeForLineError,
  GraphemeTooLargeForLineError: GraphemeTooLargeForLineError,
  CodepointTooLargeForLineError: CodepointTooLargeForLineError,
  lineBreak: lineBreak,
  wordBreak: wordBreak
};