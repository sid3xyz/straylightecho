'use strict';

require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.symbol.iterator.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.object.define-property.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.string.iterator.js");
require("core-js/modules/web.dom-collections.iterator.js");
require("core-js/modules/es.symbol.to-primitive.js");
require("core-js/modules/es.date.to-primitive.js");
require("core-js/modules/es.date.to-string.js");
require("core-js/modules/es.number.constructor.js");
require("core-js/modules/es.regexp.exec.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var _ = {
  clone: require('lodash/clone')
};
var numberRegex = /^[0-9.]{1,}$/;
module.exports = /*#__PURE__*/function () {
  function IrcCommand(command, data) {
    _classCallCheck(this, IrcCommand);
    this.command = command += '';
    this.params = _.clone(data.params);
    this.tags = _.clone(data.tags);
    this.prefix = data.prefix;
    this.nick = data.nick;
    this.ident = data.ident;
    this.hostname = data.hostname;
  }
  return _createClass(IrcCommand, [{
    key: "getTag",
    value: function getTag(tag_name) {
      return this.tags[tag_name.toLowerCase()];
    }
  }, {
    key: "getServerTime",
    value: function getServerTime() {
      var timeTag = this.getTag('time');

      // Explicitly return undefined if theres no time
      // or the value is an empty string
      if (!timeTag) {
        return undefined;
      }

      // If parsing fails for some odd reason, also fallback to
      // undefined, instead of returning NaN
      var time = Date.parse(timeTag) || undefined;

      // Support for znc.in/server-time unix timestamps
      if (!time && numberRegex.test(timeTag)) {
        return new Date(timeTag * 1000).getTime();
      }
      return time;
    }
  }]);
}();